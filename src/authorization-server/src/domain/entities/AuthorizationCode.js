// The authorization code is generated by the authorization server and opaque
// to the client. The authorization code MUST expire shortly after it is issued
// to mitigate the risk of leaks. A maximum authorization code lifetime of 10
// minutes is RECOMMENDED. The client MUST NOT use the authorization code more
// than once. If an authorization code is used more than once, the
// authorization server MUST deny the request and SHOULD revoke (when possible)
// all access tokens and refresh tokens previously issued based on that
// authorization code. The authorization code is bound to the client
// identifier, code challenge and redirect URI.

class AuthorizationCode {
  constructor({
    id,
    clientId,
    userId,
    redirectUri,
    scope,
    redeemed,
    codeChallenge,
  }) {
    this.id = id;
    this.clientId = clientId;
    this.userId = userId;
    this.redirectUri = redirectUri;
    this.scope = scope;
    this.expiresIn = 600;
    this.createdAt = new Date();
    this.redeemed = redeemed || false;
    this.codeChallenge = codeChallenge;
  }

  get active() {
    return (
      new Date() < new Date(this.createdAt.getTime() + this.expiresIn * 1000)
    );
  }

  redeem(codeVerifier) {
    if (this.redeemed) {
      throw new Error("code already redeemed");
    }

    if (this.codeChallenge !== codeVerifier) {
      throw new Error("invalid_grant");
    }

    this.redeemed = true;
  }
}

module.exports = AuthorizationCode;
